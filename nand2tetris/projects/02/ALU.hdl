// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // bus all signals
   to16(in=zx, out=bzx);
   to16(in=nx, out=bnx);
   to16(in=zy, out=bzy);
   to16(in=ny, out=bny);
   to16(in=no, out=bno);
   
   // zx implementation
   Not16(in=bzx, out=nobzx);
   And16(a=x, b=nobzx, out=xzx);
   
   // nx implementation
   Xor16(a=xzx, b=bnx, out=xnx);
   
   // zy implementation
   Not16(in=bzy, out=nobzy);
   And16(a=y, b=nobzy, out=yzy);
   
   // ny implementation
   Xor16(a=yzy, b=bny, out=yny);

   // f implementation
   Add16(a=xnx, b=yny, out=xPlusy);
   And16(a=xnx, b=yny, out=xAndy);
   Mux16(a=xAndy, b=xPlusy, sel=f, out=xy);
   
   // no
   Not16(in=xy, out=notxy);
   Mux16(a=xy, b=notxy, sel=no, out=tempout);
   And16(a=tempout,b=tempout,out=out);
   
   // ng, zr implementation
   And16(a=tempout, b=tempout,
	   out[0]=zr0,
	   out[1]=zr1,
	   out[2]=zr2,
	   out[3]=zr3,
	   out[4]=zr4,
	   out[5]=zr5,
	   out[6]=zr6,
	   out[7]=zr7,
	   out[8]=zr8,
	   out[9]=zr9,
	   out[10]=zr10,
	   out[11]=zr11,
	   out[12]=zr12,
	   out[13]=zr13,
	   out[14]=zr14,
	   out[15]=zr15,
	   out[15]=ng
	   );
	  
	// zr ANDs
	Or(a=zr0, b=zr1, out=zzr0);
	Or(a=zzr0, b=zr2, out=zzr1);
	Or(a=zzr1, b=zr3, out=zzr2);
	Or(a=zzr2, b=zr4, out=zzr3);
	Or(a=zzr3, b=zr5, out=zzr4);
	Or(a=zzr4, b=zr6, out=zzr5);
	Or(a=zzr5, b=zr7, out=zzr6);
	Or(a=zzr6, b=zr8, out=zzr7);
	Or(a=zzr7, b=zr9, out=zzr8);
	Or(a=zzr8, b=zr10, out=zzr9);
	Or(a=zzr9, b=zr11, out=zzr10);
	Or(a=zzr10, b=zr12, out=zzr11);
	Or(a=zzr11, b=zr13, out=zzr12);
	Or(a=zzr12, b=zr14, out=zzr13);
	Or(a=zzr13, b=zr15, out=zzr14);
	Not(in=zzr14, out=zr);
}