// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way
	(
		in=load,
		sel=address[0..2],
		a=loadR0,
		b=loadR1,
		c=loadR2,
		d=loadR3,
		e=loadR4,
		f=loadR5,
		g=loadR6,
		h=loadR7
	);
	
	RAM8(in=in, load=loadR0, address=address[3..5], out=R0);
	RAM8(in=in, load=loadR1, address=address[3..5], out=R1);
	RAM8(in=in, load=loadR2, address=address[3..5], out=R2);
	RAM8(in=in, load=loadR3, address=address[3..5], out=R3);
	RAM8(in=in, load=loadR4, address=address[3..5], out=R4);
	RAM8(in=in, load=loadR5, address=address[3..5], out=R5);
	RAM8(in=in, load=loadR6, address=address[3..5], out=R6);
	RAM8(in=in, load=loadR7, address=address[3..5], out=R7);
	
	Mux8Way16
	(
		a=R0,
		b=R1,
		c=R2,
		d=R3,
		e=R4,
		f=R5,
		g=R6,
		h=R7,
		sel=address[0..2],
		out=out
	);
}